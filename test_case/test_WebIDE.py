# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


class TestUntitled():
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def wait_for_window(self, timeout=2):
        time.sleep(round(timeout / 1000))
        wh_now = self.driver.window_handles
        wh_then = self.vars["window_handles"]
        if len(wh_now) > len(wh_then):
            return set(wh_now).difference(set(wh_then)).pop()

    def test_untitled(self):
        """
        problem:
        1. need to change/add configs(OS/BR) manually when changing running env
        2. if id/name does not exist, using css selector + absolute path by default,
        make it easier to miss the element when rerun
        3. no wait timeout, need to add force timeout manually or the elements would be failed to locate,
        makes the script performance bad
        4. cannot custom the exceptions, sometimes makes the exceptions hard to understand
        5. using actions chains to simulate the mouse move and click, performance is worse than send keys/click directly
        6. no assertions, need to add manually
        7. cannot customize logs, reports, snapshots generating
        8. some operations like scroll, cannot be recorded
        """

        # Test name: Untitled
        # Step # | name | target | value
        # 1 | open | / |
        self.driver.get("https://www.baidu.com/")
        # 2 | setWindowSize | 1936x1176 |
        self.driver.set_window_size(1936, 1176)
        # 3 | click | id=kw |
        self.driver.find_element(By.ID, "kw").click()
        # 4 | type | id=kw | python
        self.driver.find_element(By.ID, "kw").send_keys("python")
        # 5 | sendKeys | id=kw | ${KEY_ENTER}
        self.driver.find_element(By.ID, "kw").send_keys(Keys.ENTER)
        # 6 | mouseOver | css=.c-span-last > .rsx6qbr > .\_4jrk4fu |
        time.sleep(1)  # -> new added time sleep
        # element = self.driver.find_element(By.CSS_SELECTOR, ".c-span-last > .rsx6qbr > .\\_4jrk4fu")
        element = self.driver.find_element(By.XPATH, "//*[@id='2']/h3/a")  # -> changed css absolute path to xpath
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        # 7 | click | linkText=Python 基础教程 | 菜鸟教程 |
        self.vars["window_handles"] = self.driver.window_handles
        # 8 | storeWindowHandle | root |
        self.driver.find_element(By.LINK_TEXT, "Python 基础教程 | 菜鸟教程").click()
        # 9 | selectWindow | handle=${win7365} |
        self.vars["win7365"] = self.wait_for_window(2000)
        # 10 | click | linkText=Python 3.X 版本的教程 |
        self.vars["root"] = self.driver.current_window_handle
        # 11 | selectWindow | handle=${win8660} |
        self.driver.switch_to.window(self.vars["win7365"])
        # 12 | click | css=.previous-next-links:nth-child(4) a:nth-child(1) |
        self.vars["window_handles"] = self.driver.window_handles
        # 13 | click | css=.previous-next-links:nth-child(4) > .next-design-link > a:nth-child(1) |
        self.driver.find_element(By.LINK_TEXT, "Python 3.X 版本的教程").click()
        # 14 | close |  |
        self.vars["win8660"] = self.wait_for_window(2000)
        # 15 | selectWindow | handle=${win7365} |
        self.driver.switch_to.window(self.vars["win8660"])
        # 16 | close |  |
        self.driver.find_element(By.CSS_SELECTOR, ".previous-next-links:nth-child(4) a:nth-child(1)").click()
        # 17 | selectWindow | handle=${root} |
        self.driver.find_element(By.CSS_SELECTOR,
                                 ".previous-next-links:nth-child(4) > .next-design-link > a:nth-child(1)").click()


if __name__ == '__main__':
    pytest.main()
